type BikePath = LandPath
type PhysicalBikeSpace = physical mutable OpenSpace
type Bike = physical mutable mobile SmartEntity

var Main = fn () {
  var bikePath = new BikePath("bikePath1")
  var bikePathStart
    = new PhysicalBikeSpace(Location {0, 0}, 10, "Start")
  var bikePathEnd
    = new PhysicalBikeSpace(Location {10, 10}, 10, "End")
  var bike = new Bike()
  var bikeSPG
    = new SpacePathGraph(bikePathStart)

  bikePathStart.addEntities([(Entity) bike])

  match bikeSPG.addPathSpace((Path) bikePath, (Space) bikePathEnd) {
    var s: string => {
      print(s)
      return
    }
    var v: void => {
    }
  }

  var bikePathSegments = [(Path) bikePath]

  var index = 0

  while index < 3 {
    match bikeSPG.splitPath(bikePathSegments[index]) {
      var p: Path => push(bikePathSegments, p)
      var s: string => {
        print(s)
        return
      }
    }
    index = index + 1
  }

  print(bikePathSegments)

  print(bikeSPG.getStructJSON())

  bikeSPG.sendEntity((Entity) bike, (Space) bikePathStart, (Space) bikePathEnd)
}


Main()
