type MaybeNum = number | void

type EitherNumOrString = number | string

type MaybeNumApplyFunctionType = MaybeNum {MaybeNum, MaybeNum {number}}

type EitherNumOrStringApplyFunctionType = EitherNumOrString {EitherNumOrString, EitherNumOrString {number}}

var voidError = fun (none) {
  return "Error: expected value is void!"
}

var maybeApplyOperation = fun (var maybe, var operation) {
  match (MaybeNum) maybe {
    number num => return operation(num)
    void e => return (MaybeNum) none
  }
}

var eitherApplyOperationOrReturnAndLogError = fun (var either, var operation) {
  match (EitherNumOrString) either {
    number num => return operation(num)
    string str => {
      print(str)
      return (EitherNumOrString) str
    }
  }
}

var returnsOddNumbers = fun (var x) {
  match x % 2 {
    1 => return (MaybeNum) x
    0 => return (MaybeNum) none
  }
}

var parseMaybeNumOrReturnError = fun (var maybe) {
  match (MaybeNum) maybe {
    number num => return (EitherNumOrString) num
    void e => return (EitherNumOrString) voidError()
  }
}

var printAndReturnOddNumber = fun (number oddNumber) {
  print("The following is Odd:")
  print(oddNumber)
  return (EitherNumOrString) oddNumber
}

var sum = 0

var Main = fun (none) {
  var addToSum = fun (var x) {
    sum = sum + x
    return (EitherNumOrString) sum
  }
  var iter = 0
  while iter < 16 {
    var maybeOdd = (MaybeNum) iter
    maybeOdd = maybeApplyOperation(maybeOdd, returnsOddNumbers)
    var numOrError = parseMaybeNumOrReturnError(maybeOdd)
    numOrError = eitherApplyOperationOrReturnAndLogError(numOrError, printAndReturnOddNumber)
    eitherApplyOperationOrReturnAndLogError(numOrError, addToSum)
    iter = iter + 1
  }
  print("The sum of all odd numbers from 0-15:")
  print(sum)
}

Main()
