TCShell {

    Program = Declaration*
    Declaration = Stmt    --stmt
                | FunDeclaration    --function
    Interactive = StmtNewline

	  StmtNewline = FunDeclaration #newline 	--function
    						| CompoundStmt #newline	--compound
    						| SimpleStmts	--simple
                | newline
                | end


    Stmt = SimpleStmts #newline --simple
    			| CompoundStmt  --compound

    SimpleStmts = NonemptyListWithOptionalEndSep<SimpleStmt, ";">

    SimpleStmt = VarDeclaration   --vardeclaration
    					  | return (Exp)?		--return
                          | Exp 	--exp


    CompoundStmt = Block    --block
    		  				| if Exp Stmt (else Stmt)?	--if
          					| while Exp Stmt	--while

     Exp = AssignExp
     AssignExp = UnaryExp "=" AssignExp		--assign
     					| LorExp
     LorExp = LorExp "||" LarExp		--lor
     				| LarExp
     LarExp = LarExp "&&" EqExp		--lar
     				| EqExp
     EqExp = EqExp ("==" | "!=") RelExp		--eq
     			| RelExp
     RelExp = RelExp ( "<=" | "<" | ">=" | ">") AddExp		--rel
     				| AddExp
     AddExp = AddExp ("+" | "-") MultExp		--add
     				| MultExp
     MultExp = MultExp ( "*" | "/" | "%" ) UnaryExp		--mult
     				| UnaryExp
	UnaryExp = ("+" | "-" | "!") UnaryExp	--unary
    				| "{" ListOf<Exp, ","> "}"		--array
    				| LeftExp
     LeftExp = LeftExp "(" ListOf<Exp, ","> ")"		--call
     				| LeftExp "[" Exp "]"		--array
                    | PrimaryExp

    PrimaryExp = stringLiteral
    					| identifier
                        | numberLiteral
                        | booleanLiteral
                        | "(" Exp ")"		--group

    Block = "{" Stmt* "}"

    VarDeclaration = Parameter "=" Exp
    FunDeclaration = Parameter "(" ListOf<Parameter, ","> ")" Block

    Parameter = type identifier
    type = typeKeyword "[]"*

    typeKeyword = "number" ~identPart
    						| "string" ~identPart
                            | "bool" ~identPart
                            | "void" ~identPart

    keyword = typeKeyword
    				| booleanLiteral
                    | while
                    | if
                    | else
                    | return

    while = "while" ~identPart
    if = "if" ~identPart
    else = "else" ~identPart
    return = "return" ~identPart

    identStart      = letter | "_"
    identPart       = identStart | decimalDigit
    decimalDigit    = "0".."9"

  	identName       = identStart identPart*
    identifier      = ~keyword identName

	booleanLiteral = "true" ~identPart
    						| "false" ~identPart

    numberLiteral = digit+ ("." digit+ (("e" | "E") ("+" | "-") digit+)?)?

    stringLiteral = ("\"" char* "\"")   --doublequotes
    					    | ("'" char* "'")   --singlequotes
    char = ~"\"" ~"\n" any

    whitespace = "\t"       --tabchar
                | "\x0B"    --verticaltab
                | "\x0C"    --formfeed
                | " "       --space
                | "\u00A0"  --nobreakspace
                | "\uFEFF"  --byteordermark
                | unicodeSpaceSeparator   --spaceseperator

    lineTerminator = "\n" | "\r" | "\u2028" | "\u2029"
    unicodeSpaceSeparator = "\u2000".."\u200B" | "\u3000"
    space := whitespace | lineTerminator
    newline = space* end  	--last
  				  | whitespace* lineTerminator --whitespace
    NonemptyListWithOptionalEndSep<elem, sep> = NonemptyListOf<elem, sep> sep?
}
