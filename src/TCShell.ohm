TCShell {

    Program = Declaration*
    Declaration = Stmt    --stmt
                | FunDeclaration    --function
    Interactive = StmtNewline

	  StmtNewline = FunDeclaration #newline 	--function
    						| CompoundStmt #newline	--compound
    						| SimpleStmts	--simple
                | newline
                | end


    Stmt = SimpleStmts #newline --simple
    			| CompoundStmt  --compound

    SimpleStmts = NonemptyListWithOptionalEndSep<SimpleStmt, ";">

    SimpleStmt = VarDeclaration   --vardeclaration
    					  | returnKeyword (Exp)?		--return
                          | Exp 	--exp


    CompoundStmt = Block    --block
    		  				| ifKeyword Exp Stmt (elseKeyword Stmt)?	--if
          				| whileKeyword Exp Stmt	--while

     Exp = Exp9 Assign?
     Exp9 = Exp8 LogicalOr*
     Exp8 = Exp7 LogicalAnd*
     Exp7 = Exp6 Equality*
     Exp6 = Exp5 Inequality*
     Exp5 = Exp4 Sum*
     Exp4 = Exp3 Product*
     Exp3 = Unary	--unary
     			| Exp2  --other
     Exp2 = Exp1 ArrayAccess*
     Exp1 = Funcall         --funcall
          | "(" Exp ")" 	  --parentheses
          | stringLiteral   --strliteral
          | booleanLiteral  --boolliteral
    	    | numberLiteral   --numliteral
          | identifier      --identifier

    Assign = "=" Exp
    LogicalOr = "||" Exp8
    LogicalAnd = "&&" Exp7
    Equality = ("==" | "!=") Exp6
    Inequality = ("<=" | "<" | ">=" | ">") Exp5
    Sum = ("+" | "-") Exp4
    Product = ("*" | "/") Exp3
    Unary = ("+" | "-") Exp3
    ArrayAccess = "[" Exp "]"

    Block = "{" Stmt* "}"

    Funcall = identifier "(" FuncallArgs? ")"

    FuncallArgs = Exp NextArg*
    NextArg = "," Exp

    VarDeclaration = NewIdentifier "=" Exp
    FunDeclaration = NewIdentifier "(" ListOf<NewIdentifier, ","> ")" Block

    NewIdentifier = type identifier
    type = (numberKeyword | stringKeyword | boolKeyword | voidKeyword) "[]"*

    trueKeyword = "true" ~alnum
    falseKeyword = "false" ~alnum
    numberKeyword = "number" ~alnum
    stringKeyword = "string" ~alnum
    boolKeyword = "bool" ~alnum
    voidKeyword = "void" ~alnum
    whileKeyword = "while" ~alnum
    ifKeyword = "if" ~alnum
    elseKeyword = "else" ~alnum
    returnKeyword = "return" ~alnum

   	identifier = letter alnum*

	  booleanLiteral = (trueKeyword | falseKeyword)
    numberLiteral = digit+ floatComponent?
    floatComponent = "." digit+ scientificNotationComponent?
    scientificNotationComponent = ("e" | "E") ("+" | "-") digit+

    stringLiteral = ("\"" char* "\"")   --doublequotes
    					    | ("\'" char* "\'")   --singlequotes
    char = ~"\"" ~"\n" any

    whitespace = "\t"       --tabchar
                | "\x0B"    --verticaltab
                | "\x0C"    --formfeed
                | " "       --space
                | "\u00A0"  --nobreakspace
                | "\uFEFF"  --byteordermark
                | unicodeSpaceSeparator   --spaceseperator

    lineTerminator = "\n" | "\r" | "\u2028" | "\u2029"
    unicodeSpaceSeparator = "\u2000".."\u200B" | "\u3000"
    space := whitespace | lineTerminator
    newline = space* end  	--last
  				  | whitespace* lineTerminator --whitespace
    NonemptyListWithOptionalEndSep<elem, sep> = NonemptyListOf<elem, sep> sep?
}
